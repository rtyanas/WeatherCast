package com.yanas.mobileapp.weathercast;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.TimeZone;
import java.util.regex.Pattern;

//import javax.xml.parsers.DocumentBuilder;
//import javax.xml.parsers.DocumentBuilderFactory;
//
//import org.apache.http.NameValuePair;
//import org.apache.http.message.BasicNameValuePair;
//import org.w3c.dom.Document;
//import org.w3c.dom.Element;
//import org.w3c.dom.NamedNodeMap;
//import org.w3c.dom.Node;
//import org.w3c.dom.NodeList;
//import org.xml.sax.InputSource;
// import org.w3c.dom.Document;

import android.os.AsyncTask;
import android.os.Bundle;
import android.app.Activity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.TextView;
import android.support.v4.app.NavUtils;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.Intent;
import android.os.Build;
// 
public class DisplayWeatherInfoActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_display_message);
		// Show the Up button in the action bar.
		setupActionBar();
		
		Intent intent = getIntent();
		String location = intent.getStringExtra(StationListActivity.LOCATION_ID);
		String station = intent.getStringExtra(StationListActivity.LOCATION_ID);
		String lat = "0.0";
		String lon = "0.0";
		boolean useZipcode = false;
		final int CITY = 0;
		final int STATE = 1;
		final int ZIPCODE = 2;
		
		String stationData[] = location.split(",");
		Log.d("DisplayMessage", "location: "+ stationData);
		if(stationData.length >= 3) {
			if( (stationData[ZIPCODE] != null) && 
					((! stationData[ZIPCODE].equals("")) && (! stationData[ZIPCODE].equals("null"))) ) {
				useZipcode = true;
				Log.i("DisplayWeatherInfoActivity", "Using Zipcode");
			}
			else {
				Log.i("DisplayWeatherInfoActivity", "Zipcode not found, use lat/long");
			}
			if( ! useZipcode && stationData.length >= 5) {
				
				lat = location.split(",")[3];
				lon = location.split(",")[4];
			}
		}
		
		/* hard code station for Testing */
		station = "8465705"; // New Haven, Conn - air temp, wind
		// station = "8531680"; // Sandy Hook - Tide info 
		// station = "8531833"; // Navesink tide info
		// station = "8531223";  // Cheesequake tide info
		// station = "8531545";  // Keyport tide info

		TextView textView = new TextView(this);
		textView.setTextSize(18);
		
		Date nowDate = new Date();
		SimpleDateFormat ft = new SimpleDateFormat("yyy-MM-dd'T'HH:");
		SimpleDateFormat ftGmt = new SimpleDateFormat("yyy-MM-dd'T'HH:");
		ftGmt.setTimeZone(TimeZone.getTimeZone("GMT"));
		
		Log.d("DisplayMessage", "Date: "+ft.format(nowDate) );
		// DisplayMessage(17332): Date: 2013-10-01T10:44
		
		Pattern pNums = Pattern.compile("^[0-9.]*$");

		SetTheWeather weatherReq = new SetTheWeather();
		weatherReq.setTheTide(
				station, "air_temperature", 
				ftGmt.format(nowDate)+"00", ftGmt.format(nowDate)+"00");

		WeatherData weatherData = new WeatherData();
		String temperature = weatherData.getObservedPropertyTide(weatherReq);
				
		if(pNums.matcher(temperature).find() )
		{
			double round = 0.5;
			Double tempD =  Double.valueOf(temperature);
			tempD = (tempD * 9.0/5.0 + 32) + round;
			temperature = String.valueOf(tempD.intValue());
		}
		
		weatherReq.setTheTide(
				station, "winds", 
				ftGmt.format(nowDate)+"00", ftGmt.format(nowDate)+"00");

		String winds = weatherData.getObservedPropertyTide(weatherReq);
		String windDir="Not Available";
		String windSpeed = "Not Available";
		String windGust = "Not Available";
		if(winds.split(",").length >= 3) {
			double ms_knotsConversionFactor = 1.94384449244;
			int i=0;
			for(String w : winds.split(",")) {
				if(pNums.matcher(w).find() && i == 0 ) // Found wind direction
				{
					windDir = w;
				} 
				else if(pNums.matcher(w).find() && i == 1 ) // Found wind speed
				{
					windSpeed = String.format("%.2f", Double.valueOf((Double.valueOf(w) * ms_knotsConversionFactor)));
				}
				else if(pNums.matcher(w).find() && i == 2 ) // Found wind Gust speed
				{
					windGust = String.format("%.2f", Double.valueOf((Double.valueOf(w) * ms_knotsConversionFactor)));
				}
				i++;
			}
		}
		
		if(useZipcode) {
			weatherReq.setTheMeteorologicalZip(
					// "40.4867", "-74.2790", // South Amboy  // "40.2954", "-73.9899",  Long Branch
					stationData[ZIPCODE],
					ft.format(nowDate)+"00", 
					ft.format(nowDate.getTime() + 60 * 60 * 1000 /* add one hour */)+"00");			
		}
		else {
			weatherReq.setTheMeteorological(
					// "40.4867", "-74.2790", // South Amboy  // "40.2954", "-73.9899",  Long Branch
					lat, lon,
					ft.format(nowDate)+"00", 
					ft.format(nowDate.getTime() + 60 * 60 * 1000 /* add one hour */)+"00");
		}
		String obsData = weatherData.getObservedPropertyMeteorological(weatherReq);
		
		textView.setText("New Haven, Conn\nTemperature: "+ temperature +"F"+
				"\nWinds direction: "+ windDir +"\n        speed: "+  windSpeed +"knt\n        Gust: "+ windGust +"knt"+
				"\n\n"+ stationData[CITY] +", "+ stationData[STATE] +"\n"+ obsData);
		
		setContentView(textView);
	}

	/**
	 * Set up the {@link android.app.ActionBar}, if the API is available.
	 */
	@TargetApi(Build.VERSION_CODES.HONEYCOMB)
	private void setupActionBar() {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
			getActionBar().setDisplayHomeAsUpEnabled(true);
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.display_message, menu);
		getMenuInflater().inflate(R.menu.main_activity_actions, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case android.R.id.home:
			// This ID represents the Home or Up button. In the case of this
			// activity, the Up button is shown. Use NavUtils to allow users
			// to navigate up one level in the application structure. For
			// more details, see the Navigation pattern on Android Design:
			//
			// http://developer.android.com/design/patterns/navigation.html#up-vs-back
			//
			NavUtils.navigateUpFromSameTask(this);
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
	private String getTemperature(String response) {
		String temp = "Not Available";
		
		
		return temp;
	}
	
	
} // public class DisplayMessageActivity extends Activity
